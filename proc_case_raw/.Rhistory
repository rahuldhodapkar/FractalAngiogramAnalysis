install.packages('imager')
library('imager')
setwd("~/Playground/FractalDimension/proc_case_raw")
read.image('edge_1.jpg')
load.image('edge_1.jpg')
img = load.image('edge_1.jpg') %>% greyscale
img = load.image('edge_1.jpg') %>% grayscale
bitarray = img > 0.5
plot(bitarray)
# we would like a 400 x 400 image
bitarray.dims
dims(bitarray)
dim(bitarray)
dim(bitarray)[0]
dim(bitarray)[[0]]
dim(bitarray)(1)
dim(bitarray)[1]
dim(bitarray)[2]
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
img[c(xstart:xend, ystart:yend)]
}
cropped_img -= crop.image(bitarray, 500, 500)
cropped_img = crop.image(bitarray, 500, 500)
plot(cropped_img)
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
return(img[c(xstart:xend, ystart:yend)])
}
plot(cropped_img)
cropped_img = crop.image(bitarray, 500, 500)
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
return(img[c(xstart:xend)][c(ystart:yend)])
}
cropped_img = crop.image(bitarray, 500, 500)
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
return(img[c(xstart:xend),c(ystart:yend)])
}
cropped_img = crop.image(bitarray, 500, 500)
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
return(img[c(xstart:xend),c(ystart:yend)])
}
cropped_img = crop.image(bitarray, 500, 500)
cropped_img = crop.image(bitarray, 500, 500)
bitarray[,2]
bitarray[1,2]
bitarray[1:2,2]
bitarray[1:2,2:4]
crop.image <- function(img, xdim, ydim) {
dims = dim(img);
xdim_cur = dims[1];
ydim_cur = dims[2];
xstart = (xdim_cur - xdim)/2;
xend = xstart + xdim;
ystart = (ydim_cur - ydim)/2;
yend = ystart + ydim;
return(img[xstart:xend,ystart:yend])
}
cropped_img = crop.image(bitarray, 500, 500)
cropimg <- function(img, xdim, ydim) {
dims <- dim(img);
xdim_cur <- dims[1];
ydim_cur <- dims[2];
xstart <- as.integer((xdim_cur - xdim)/2);
xend <- xstart + xdim;
ystart <- as.integer((ydim_cur - ydim)/2);
yend <- ystart + ydim;
return(img[xstart:xend,ystart:yend])
}
cropimg(bitarray, 500, 500)
dims <- dim(bitarray)
xdim_cur <- dims[1];
ydim_cur <- dims[2];
xstart <- as.integer((xdim_cur - xdim)/2);
xend <- xstart + xdim;
xdim = 500
ydim=500
xstart <- as.integer((xdim_cur - xdim)/2);
xend <- xstart + xdim;
ystart <- as.integer((ydim_cur - ydim)/2);
yend <- ystart + ydim;
cropped = bitarray[xstart:xend,ystart:yend]
plot(cropped)
View(cropped)
plot(bitarray)
plot(cropped)
plot(bitarray)
cropimg <- function(img, xdim, ydim) {
dims <- dim(img);
xdim_cur <- dims[1];
ydim_cur <- dims[2];
xstart <- as.integer((xdim_cur - xdim)/2);
xend <- xstart + xdim;
ystart <- as.integer((ydim_cur - ydim)/2);
yend <- ystart + ydim;
return(img[xstart:xend,ystart:yend,1,1])
}
cropimg(bitarray, 500, 500)
cropped = cropimg(bitarray, 500, 500)
plot(cropped)
img = load.image('edge_1.jpg') %>% greyscale > 0.5
img
plot(img)
img = load.image('edge_1.jpg') %>% greyscale
plot(img)
